use std::fmt::Display;

use chrono::{DateTime, Datelike, NaiveTime, TimeZone, Timelike, Weekday};
use serde::{Deserialize, Serialize};

pub enum DateConversionError {
  NotSpecialTime,
}

#[derive(PartialEq, Eq, Debug, Serialize, Deserialize, Clone, Copy)]
pub enum Time {
  Morning,
  MidDay,
  AfterWork,
  Evening,
}

impl TryFrom<NaiveTime> for Time {
  type Error = DateConversionError;

  fn try_from(time: NaiveTime) -> Result<Self, Self::Error> {
    match (time.hour(), time.minute()) {
      (6, 27..=33) => Ok(Time::Morning),
      (11..=14, 0..=59) => Ok(Time::MidDay),
      (17, 00..=15) => Ok(Time::AfterWork),
      (22..=23, 0..=59) => Ok(Time::Evening),
      _ => Err(DateConversionError::NotSpecialTime),
    }
  }
}

#[derive(PartialEq, Eq, Debug, Serialize, Deserialize, Clone, Copy)]
pub enum DayType {
  WorkDay(Time),
  Friday(Time),
  Saturday(Time),
  Sunday(Time),
}

impl<T> TryFrom<DateTime<T>> for DayType
where
  T: TimeZone,
{
  type Error = DateConversionError;

  fn try_from(date: DateTime<T>) -> Result<Self, Self::Error> {
    let time = Time::try_from(date.time())?;

    match date.weekday() {
      Weekday::Fri => Ok(DayType::Friday(time)),
      Weekday::Sat => Ok(DayType::Saturday(time)),
      Weekday::Sun => Ok(DayType::Sunday(time)),
      _ => Ok(DayType::WorkDay(time)),
    }
  }
}

impl Display for DayType {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    use DayType::*;
    use Time::*;

    let str = match self {
      WorkDay(Morning) => "üè¢üêë Voi voi taas t√§ytyy her√§t√§ imem√§√§n pomon perse karvoja,, B√Ñ√Ñ B√Ñ√Ñ",
      WorkDay(MidDay) => "üí©üêë Aika k√§ytt√§√§ naapurin Ari-Jukan vinkki√§ ja k√§yd√§ paskalla niin minulle maksetaan paskomisesta R√ÑH H√ÑH",
      WorkDay(AfterWork) => "üè†üêë Vihdoin p√§√§see kotiin niin ei tarvitse kusip√§√§ pomon olla nalkuttamassa",
      WorkDay(Evening) => "üõèÔ∏èüêë Kohtahan se pit√§√§ menn√§ nukkumaan,, taidanpa laittaa her√§tys kellon valmiiksi",
      Friday(Morning) => "üõèÔ∏èüêë‚è∞ PIPIPI PIPIPI,,, saatanan her√§tyskello,, onneksi t√§n√§√§n on perjantai niin voi t√∂iden j√§lkeen vet√§√§ p√§√§n tyhj√§ksi",
      Friday(MidDay) => "üí©üêë Taidanpa perjantain kunniaksi k√§yd√§ erikois pitk√§ll√§ paskalla",
      Friday(AfterWork) => "üè™üêë P√§√§stih√§n se pomo vihdoin l√§htem√§√§n,, nyt √§kki√§ alkoon",
      Friday(Evening) => "üç∫üêë Vittu ett√§ on hyv√§ meno kun ei tarvitse huomenna her√§t√§ ja voin juoda koko y√∂n",
      Saturday(Morning) => "üõèÔ∏èüêë Nyth√§n se voisi olla aika menn√§ nukkumaan kun viinaksetkin on jo loppu",
      Saturday(MidDay) | Sunday(Morning) => "üõèÔ∏è Zzz",
      Saturday(AfterWork) => "üè™üêë Voi vittu,, kello on jo noin paljon,, nyt √§kki√§ kauppaan hakemaan kaljat t√§lle p√§iv√§lle",
      Saturday(Evening) => "üç∫üêë Aika l√§hte√§ baariin laulamaan karaokea ja juomaan paikka tyhj√§ksi",
      Sunday(MidDay) => "üêë Vittu ett√§ on ihan hirve√§ krapula,, en kyll√§ juo en√§√§ ennen ensi kertaa R√ÑH H√ÑH",
      Sunday(AfterWork) => "üçïüêë Olipa hyv√§ Grandiosan pakaste sipuli pizza tasaamaan oloa",
      Sunday(Evening) => "üõèÔ∏èüêë Oi voi,, taas pit√§√§ valmistautua nukkumaan ett√§ jaksaa huomenna leikki√§ pomon perse karvoilla koko p√§iv√§n"
    };
    write!(f, "{}", str)
  }
}
